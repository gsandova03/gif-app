{"version":3,"sources":["componentes/AddCategory.js","helpers/getGifs.js","componentes/GifGridItem.js","componentes/SearchCategory.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","input","setInput","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","fetch","encodeURI","respuesta","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","SearchCategory","loading","setImages","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACzCC,EADyC,KAClCC,EADkC,KAiBhD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAAES,GAAF,OAAoBP,GAApB,mBAA8BO,OAC5CN,EAAS,MAMX,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAnBe,SAACP,GACpBF,EAASE,EAAEQ,OAAOF,a,+BCPTG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DAET,mCAFS,SAIGC,MAAM,0CAAD,OAA4CC,UAAWH,GAAvD,6BAFjB,qCAFS,cAIfI,EAJe,gBAMEA,EAAUC,OANZ,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXjB,kBAedL,GAfc,4CAAH,sDCEPQ,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCAGQ,EAAiB,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFpB,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CACnCoB,KAAM,GACNc,SAAS,IAJ+B,mBAEnCP,EAFmC,KAE3BQ,EAF2B,KAiB1C,OAVAC,qBAAU,WACRvB,EAASC,GACNuB,MAAM,SAACC,GACNH,EAAU,CACRf,KAAMkB,EACNJ,SAAS,SAGd,CAAEpB,IAEEa,EDb2BY,CAAczB,GAAlCa,EAFgC,EAEtCP,KAAcc,EAFwB,EAExBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAqDhB,IACrD,qBAAKgB,UAAU,YAAf,SACGI,EACG,mBAAGJ,UAAU,oCAAb,0BAGAH,EAAOL,KAAK,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEMrBgB,EArBM,WAAO,IAAD,EAEWxC,mBAAS,CAAC,cAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEIS,EAAWc,KAAK,SAAER,GAAF,OACd,cAAC,EAAD,CAAiCA,SAAUA,GAArBA,Y,MCVlC2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9d2a29cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [input, setInput] = useState(\"\");\n  \n  const handleChange = (e) => {\n    setInput(e.target.value);\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n  \n    if( input.trim().length > 2 ){\n      setCategories(( categories ) => [ input ,...categories ]);\n      setInput('');\n    }\n  \n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        type='text'\n        value={ input }\n        onChange={ handleChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n\n}","export const getGifs = async( category ) => {\n\n  const KEY = \"F2Iyjsf6k8tlVUL4X70d8I8B3lE96J5p\";\n\n  const respuesta = await fetch(`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=${ KEY }`);\n  \n  const { data } = await respuesta.json();\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  \n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\n// import PropTypes from 'prop-types'\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const SearchCategory = ({ category }) => {\n  \n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\" >{ category }</h3>\n      <div className=\"card-grid\">\n        {loading\n          ? <p className=\" animate__animated animate__pulse\">Cargando ...</p>\n            \n          : (\n            images.map( (img) => (\n              <GifGridItem key={img.id} {...img} />\n            ))\n          )\n        }\n      </div>\n    </>\n  )\n}\n\n// SearchCategory.propTypes = {\n\n// }","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n  const [images, setImages] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs( category )\n      .then( (imgs) => {\n        setImages({\n          data: imgs,\n          loading: false\n        })\n      })\n  }, [ category ])\n\n  return images; \n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './componentes/AddCategory';\nimport { SearchCategory } from './componentes/SearchCategory';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n\n      <ul>\n        {\n          categories.map( ( category ) => (\n            <SearchCategory key={ category } category={category} />\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}